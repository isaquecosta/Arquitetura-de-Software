/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Conta;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-09-09T16:43:29.646Z")

@Api(value = "conta", description = "the conta API")
@RequestMapping(value = "/v1")
public interface ContaApi {

    @ApiOperation(value = "Lista todas as contas", nickname = "contaGet", notes = "", response = Conta.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Lista de todas as contas", response = Conta.class, responseContainer = "List") })
    @RequestMapping(value = "/conta",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Conta>> contaGet();


    @ApiOperation(value = "Deleta conta específica", nickname = "contaIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Conta deletada schemas: $ref: "),
        @ApiResponse(code = 400, message = "ID fornecido inválido"),
        @ApiResponse(code = 404, message = "Conta não encontrada") })
    @RequestMapping(value = "/conta/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> contaIdDelete(@ApiParam(value = "id da conta",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Detalha uma conta", nickname = "contaIdGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Detalhes da conta schemas: $ref: "),
        @ApiResponse(code = 400, message = "ID fornecido inválido"),
        @ApiResponse(code = 404, message = "Conta não encontrada") })
    @RequestMapping(value = "/conta/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> contaIdGet(@ApiParam(value = "id da conta",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Altera/Atualiza conta específica", nickname = "contaIdPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "ID fornecido inválido"),
        @ApiResponse(code = 404, message = "Conta não encontrada") })
    @RequestMapping(value = "/conta/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> contaIdPut(@ApiParam(value = "id da conta",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Registra uma nova conta", nickname = "contaPost", notes = "", response = Conta.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Nova conta registrada", response = Conta.class) })
    @RequestMapping(value = "/conta",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Conta> contaPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Conta conta);

}
